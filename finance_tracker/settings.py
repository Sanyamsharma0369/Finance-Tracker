"""
Django settings for finance_tracker project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import socket

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-tyt9spc4nc=ni&11ars5a2mrb=ne9p0uurjnlsj3=(&gvkzc4('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '*']

# Required for cross-device access
CSRF_TRUSTED_ORIGINS = ['http://localhost:8000', 'http://127.0.0.1:8000']
CSRF_TRUSTED_ORIGINS += ['http://192.168.111.179:8000']
CSRF_TRUSTED_ORIGINS += ['http://192.168.122.179:8000']

# To enable access across multiple devices on the same network,
# add your network IP address below (with wildcard to cover all devices)
# For example:
# - If your computer's IP is 192.168.1.100, other devices on your network
#   will access the server using that IP
# - Find your IP address using "ipconfig" (Windows) or "ifconfig" (Mac/Linux)

# Add your local network IP to trusted origins
def get_local_ip():
    try:
        # Get the local IP address
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        local_ip = s.getsockname()[0]
        s.close()
        return local_ip
    except:
        return None

local_ip = get_local_ip()
if local_ip:
    # Add the IP address to CSRF_TRUSTED_ORIGINS
    CSRF_TRUSTED_ORIGINS.append(f'http://{local_ip}:8000')
    print(f"Server will be accessible from mobile devices at: http://{local_ip}:8000")
else:
    print("Couldn't detect local IP address. Mobile access may be limited.")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crispy_forms',
    'crispy_bootstrap5',
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'core.middleware.UserDataProtectionMiddleware',  # Our custom middleware for data isolation
    'core.middleware.AdminAccessMiddleware',  # Middleware to protect admin URLs
    'core.middleware.SecurityHeadersMiddleware',  # Custom middleware to handle security headers
]

ROOT_URLCONF = 'finance_tracker.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.demo_mode',
                'core.context_processors.currency_info',
                'core.context_processors.user_profile',
            ],
        },
    },
]

WSGI_APPLICATION = 'finance_tracker.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Database Routers
DATABASE_ROUTERS = [
    'core.routers.UserSpecificRouter',
    'core.routers.AsyncUserSpecificRouter',
]


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static'
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'

LOGIN_REDIRECT_URL = 'dashboard'
LOGIN_URL = 'login'
LOGOUT_REDIRECT_URL = 'dashboard'

# Authentication backends - custom backend first to bypass login requirements
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'core.auth_backends.AnonymousUserBackend',
]

# Disable login requirement for all views
ANONYMOUS_USER_ENABLED = False

# For testing/demo purposes only - never use this in production
DEMO_MODE = False

# Django debug toolbar - uncomment if you have it installed
# if DEBUG:
#     INSTALLED_APPS += ['debug_toolbar']
#     MIDDLEWARE += ['debug_toolbar.middleware.DebugToolbarMiddleware']
#     INTERNAL_IPS = ['127.0.0.1', 'localhost']

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Crispy Forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Email settings for password reset
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'  # Gmail SMTP server
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'your.email@gmail.com'  # Replace with your actual email
# EMAIL_HOST_PASSWORD = 'your-app-password'  # Use an app password for Gmail
DEFAULT_FROM_EMAIL = 'noreply@financetracker.com'
ADMIN_EMAIL = 'admin@example.com'

# IMPORTANT: For Gmail to work properly:
# 1. Replace EMAIL_HOST_USER above with your actual Gmail address
# 2. Create an App Password (16-character code) at https://myaccount.google.com/apppasswords
#    - You must have 2-Step Verification enabled on your Google account first
#    - Then go to App passwords, select "Other" from the dropdown and enter "Finance Tracker"
#    - Copy the 16-character code that Google generates
# 3. Replace EMAIL_HOST_PASSWORD with that App Password
# 4. Never use your regular Gmail password (it won't work with SMTP)
#
# If you encounter errors, try these troubleshooting steps:
# - Ensure your Google account has 2-Step Verification enabled
# - Check that you're using an App Password, not your regular password
# - Verify that "Less secure app access" is not being used (App Passwords are the secure way)
# - For testing only, you can use: EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Production email settings (uncomment when deploying)
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.example.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_PASSWORD = 'your-password'

# Security Settings
# For development only - disable secure headers that require HTTPS
if DEBUG:
    # Disable security headers that require HTTPS in development
    SECURE_CROSS_ORIGIN_OPENER_POLICY = None  # Disable COOP header in development
    SECURE_REFERRER_POLICY = None  # Disable strict referrer policy in development
    SECURE_CONTENT_TYPE_NOSNIFF = False  # Allow content type sniffing for PDF
    SECURE_BROWSER_XSS_FILTER = False  # Disable XSS protection for testing
    SESSION_COOKIE_SECURE = False  # Allow cookies over non-HTTPS
    CSRF_COOKIE_SECURE = False  # Allow CSRF cookies over non-HTTPS
    
    # Add your IP addresses to the CSRF trusted origins
    local_ips = ['192.168.56.1', '192.168.59.179']
    for ip in local_ips:
        CSRF_TRUSTED_ORIGINS.append(f'http://{ip}:8000')
else:
    # Production settings
    SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'
    SECURE_REFERRER_POLICY = 'same-origin'
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True


